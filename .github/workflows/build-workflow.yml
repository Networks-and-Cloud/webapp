name: BUILD workflow

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set AWS Credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{secrets.AWS_REGION}}
      run: echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"  # For debugging

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 18

    - name: Display .env file
      run: |
        touch .env
        echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
        echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
        echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
        echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
        echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}" >> .env
        echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> .env
        cat .env

    - name: configuremysql
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        sudo systemctl start mysql
        sudo systemctl status mysql
        mysql -u ${{ secrets.MYSQL_USER }} -p"${{ secrets.MYSQL_PASSWORD }}"

    - name: install the dependencies
      run: npm install
      
    - name: Zip webapp contents
      run: |
        zip -r webapp.zip ./

    - name: list files
      run: |
        ls -a
        current_directory=$(pwd)

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: v18.17.1
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
          
    - name: install the dependencies
      run: npm install


    - name: run the integration
      run: |
        npm test

        
    # - name: Set up Packer
    #   run: |
    #       if [ -f packer ]; then
    #         sudo rm packer
    #       fi
    #       sudo wget https://releases.hashicorp.com/packer/1.7.3/packer_1.7.3_linux_amd64.zip
    #       sudo unzip -o packer_1.7.3_linux_amd64.zip
    #       chmod +x packer
    #       sudo mv packer /usr/local/bin/
    #   shell: bash

      

    - name: Initialize Packer
      working-directory: packer

      run: packer init ami.us-east-1.pkr.hcl

      
    - name: Build AMI
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      working-directory: packer
      run: packer build ami.us-east-1.pkr.hcl 
      shell: bash

    - name: Fail if any step failed
      run: |
          if [[ ${{ job.status }} != 'success' ]]; then
            echo "One or more steps in the workflow failed. Cancelling the AMI build."
            exit 1
          fi

    - name: Instance Refresh automation / Continuous Delivery
      run: |
        sudo apt-get install jq
        ASG_NAME=asg_launch_config
        LAUNCH_CONFIG=asg_launch_config
        IMAGE=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)
        IMAGE_ID=$(jq -n \
          --arg img "$IMAGE" \
          '{"ImageId": $img}')
        aws ec2 create-launch-template-version \
          --launch-template-name "$LAUNCH_CONFIG" \
          --version-description updateAMI --source-version 1 \
          --launch-template-data="$IMAGE_ID"
        TEMPLATE_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name="$LAUNCH_CONFIG" \
          --filters="Name=is-default-version,Values=false" \
          --query 'sort_by(LaunchTemplateVersions, &CreateTime)[-1].[VersionNumber]' --output text)
        aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME \
          --launch-template LaunchTemplateName="$LAUNCH_CONFIG",Version=$TEMPLATE_VERSION
        aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $ASG_NAME --strategy Rolling
        printf "Instance refresh in progress"
        while true;
        do
          instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME \
            --query "InstanceRefreshes[0].Status" --output text)
          if [ "$instance_refresh_status" = "Successful" ]; then
            printf "\nInstance refresh successful!"
            break
          fi
          if [ "$instance_refresh_status" = "Cancelling" ] || [ "$instance_refresh_status" = "Cancelled" ] || [ "$instance_refresh_status" = "Failed" ]; then
            printf "\nInstance refresh failed!"
            exit 1
          fi
          echo -ne "."
          sleep 10
        done
